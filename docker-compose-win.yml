# Usage:
# docker compose -f docker-compose-win.yml --profile all up -d
# docker compose -f docker-compose-mac.yml --profile otel-all up -d
# docker compose -f docker-compose-win.yml --profile otel-no-monitoring --profile services-all up -d

services:
  weather.api:
    image: ${DOCKER_REGISTRY-}weather
    build:
      context: .
      dockerfile: Architecture/WeatherAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - 5100:5100
    depends_on:
      - location.api
    networks:
      otel:
    profiles:
      - services-all      

  location.api:
    image: ${DOCKER_REGISTRY-}location
    build:
      context: .
      dockerfile: Architecture/LocationAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - 5500:5500
    depends_on:
      rabbitmq:
        condition: service_healthy # wait for rabbitmq to be healthy
    networks:
      otel:
    profiles:
      - services-all

  serviceworker:
    image: ${DOCKER_REGISTRY-}serviceworker
    build:
      context: .
      dockerfile: Architecture/ServiceWorker/Dockerfile
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy # wait for rabbitmq to be healthy
    networks:
      otel:
    profiles:
      - services-all

  blackbox:
    # https://github.com/prometheus/blackbox_exporter/releases
    image: prom/blackbox-exporter:v0.25.0
    container_name: blackbox
    restart: unless-stopped
    ports:
      - 9115:9115
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/blackbox.yml:/etc/blackbox/blackbox.yml
    command: --config.file=/etc/blackbox/blackbox.yml
    networks:
      - otel
    profiles:
      - otel-all
     
  prometheus:
    # https://github.com/prometheus/prometheus/releases
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    depends_on:
      blackbox:
        condition: "service_started"
        required: false
    networks:
      - otel
    profiles:
      - otel-all
      - otel-no-monitoring

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:2.6.0
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
      
  tempo:
    # https://github.com/grafana/tempo/releases
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/tempo.yml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
    depends_on:
      - otel-collector
    networks:
      otel:
    profiles:
      - otel-all
      - otel-no-monitoring
      
  loki:
    # https://github.com/grafana/loki/releases
    image: grafana/loki:3.1.1
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro      
      - ./Docker/loki.yml:/etc/loki/local-config.yaml
      - loki:/data/loki
    restart: unless-stopped
    ports:
      - 3100:3100
    networks:
      otel:
    profiles:
      - otel-all
      - otel-no-monitoring      
      
  grafana:
    # https://github.com/grafana/grafana/releases
    image: grafana/grafana:11.5.1
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/grafana/provisioning:/etc/grafana/provisioning #https://grafana.com/docs/grafana/latest/administration/provisioning/
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    user: root
    ports:
      - 3001:3000
    depends_on:
      - prometheus
      - tempo
      - loki      
    networks:
      otel:
    profiles:
      - otel-all
      - otel-no-monitoring
      
  otel-collector:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/releases
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector-contrib:0.119.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./Docker/otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
      - "9200:55679"  # zpages
    networks:
      otel:
    profiles:
      - otel-all
      - otel-no-monitoring
      
  rabbitmq:
    # https://github.com/docker-library/rabbitmq
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    networks:
      otel:
    profiles:
      - services-all

networks:
  otel:

volumes:
  loki:
  prometheus:
  tempo:
  grafana-data:
